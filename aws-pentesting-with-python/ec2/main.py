import boto3
import json
import os
from json_datetime_serializer import json_datetime_serializer
import logging
from moto import mock_ec2
from describe_ec2_instances import describe_instances
from create_snapshot import create_snapshot
from create_volume import create_volume
from stop_ec2 import stop_instances
from detach_volume import detach_volume
from attach_volume import attach_volume
from start_ec2 import start_instances

logger = logging.getLogger()
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s: %(levelname)s: %(message)s')

"""
    - Create a snapshot from an EC2 volume. 
        wait
    - Create an volume from a snapshot with larger size.
        wait
    - Stop the instance.
        wait
    - Detach the volume.
        wait
    - Attach new volume to the instance.
        wait
    - Start the instance.
"""

def main(instance_id, root_volume_size):
    # wait until the snapshot is created and then print the snapshot details to the console and log file. 
    client = boto3.client('ec2')
    snapshot_id = create_snapshot(instance_id)
    logger.info('[0] - - Snapshot stage completed......!')
    new_volume_id = create_volume(root_volume_size, snapshot_id)
    logger.info('[1] - - Volume stage completed!')
    stop_instances(instance_id)   
    logger.info('[2] - - Stopping stage completed.....!')
    detach_volume(instance_id)
    logger.info('[3] - - Detaching stage completed.....!')
    attach_volume(instance_id, new_volume_id)
    logger.info('[4] - - Attachching stage completed.....!')
    start_instances(instance_id)   
    logger.info('[6] - - Starting stage completed.....!')
    
    # wait until the volume is created and then print the volume details to the console and log file.

    # wait until the instance is stopped and then print the instance details to the console and log file.
    # instance_stopping_waiter = client.get_waiter('instance_stopped')
    # instance_stopping_waiter.wait(InstanceIds=[instance_id])
    
    # wait until the volume is detached and then print the volume details to the console and log file.
    # volume_detaching_waiter = client.get_waiter('volume_in_use')
    # volume_detaching_waiter.wait(VolumeIds=[describe_instances(instance_id)['Volumes'][0]['VolumeId']])
    
    # wait until the new volume is attached and then print the volume details to the console and log file.
    # volume_attaching_waiter = client.get_waiter('volume_in_use')
    # volume_attaching_waiter.wait(VolumeIds=new_volume_id)
    #                             #  [create_volume(instance_id, root_volume_size)['VolumeId']])
    
    # wait until the instance is started and then print the instance details to the console and log file.
    # instance_starting_waiter = client.get_waiter('instance_running')
    # instance_starting_waiter.wait(InstanceIds=[instance_id])
    
       
if __name__ == '__main__':
    logger.info('Process is running......!')
    instance_id = 'i-0db03d4defe2f29c3'
    # input('Enter an instance id: ')   
    root_volume_size = 40
    # input('Enter a root volume size: ')
    ec2 = main(instance_id, root_volume_size)
    logger.info('Starting... ...')
    logger.info(
        f'Snapshot details: {json.dumps(ec2, indent=4, default=json_datetime_serializer)}'
    )
    logger.info('Done!')