"""
    Symmetric KMS keys:
        Contain a 256-bit single encryption key that is used for both encrypt and decrypt operations. 
        Keys never leave AWS KMS unencrypted.
    Asymmetric KMS keys:
        Asymmetric KMS keys can contain an RSA key pair or an Elliptic Curve (ECC) key pair.
        The private key in the Asymmetric Key pair never leaves AWS KMS unencrypted. However, You can use the public key within AWS KMS by calling the AWS KMS API operations or downloading the public key to operate outside KMS.
        You can use KMS keys with RSA key pairs to encrypt or decrypt data or sign and verify messages (but not both).
        You can use KMS keys with ECC key pairs only to sign and verify messages.
"""
import json
import logging
from datetime import date, datetime

import boto3
from botocore.exceptions import ClientError

AWS_REGION = 'eu-central-1'

# logger config
logger = logging.getLogger()
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s: %(levelname)s: %(message)s')

kms_client = boto3.client("kms", region_name=AWS_REGION)


def json_datetime_serializer(obj):
    """
    Helper method to serialize datetime fields
    """
    if isinstance(obj, (datetime, date)):
        return obj.isoformat()
    raise TypeError("Type %s not serializable" % type(obj))


def create_kms_key():
    """
    Creates a unique customer managed KMS key.
    """
    try:
        response = kms_client.create_key(AliasName='alias/demo-kms-key')

    except ClientError:
        logger.exception('Could not create a CMK key.')
        raise
    else:
        return response


# if __name__ == '__main__':
#     # Constants
#     logger.info('Creating a symetric CMK...')
#     kms = create_kms_key()
#     logger.info(
#         f'Symetric CMK is created with details: {json.dumps(kms, indent=4, default=json_datetime_serializer)}'
#     )
    
    
# print(create_kms_key())

# create a symetric CMK key with alias using aws-shell (aws-cli) and boto3 
def create_cmk(alias="demo-second-kms"):
    kms_client = boto3.client('kms',
                      aws_access_key_id='', 
                      aws_secret_access_key='', 
                      region_name='')

    response = kms_client.create_key()

    # Return the key ID and ARN
    return response["KeyMetadata"]["KeyId"], response["KeyMetadata"]["Arn"]


# print(create_cmk())

# create KMS key with alias region and account using aws-shell (aws-cli) and boto3
def create_cmk_with_alias(description="demo-kms-key", alias="demo-kms-key"):
    kms_client = boto3.client('kms',
                      aws_access_key_id='', 
                      aws_secret_access_key='', 
                      region_name='eu-central-1')

    response = kms_client.create_key(Description=description)

    # Return the key ID and ARN
    return response["KeyMetadata"]["KeyId"], response["KeyMetadata"]["Arn"]


print(create_cmk_with_alias())