#!/usr/bin/env python3

import boto3
import json
import sys
import os
import pprint
import boto3

# declare env var for aws-shell

session = boto3.Session(profile_name='k8s-user')



def updateKMS():
    """Retrieve an existing KMS CMK based on its description"""

    kms_client = boto3.client('kms',
                      aws_access_key_id=' ', 
                      aws_secret_access_key='  ', 
                      region_name='eu-central-1')
    response = kms_client.list_keys()
    for cmk in response["Keys"]:
        key_info = kms_client.describe_key(KeyId=cmk["KeyArn"])
        if key_info["KeyMetadata"]["Description"] == "k8s-user":
            print(key_info["KeyMetadata"]["KeyId"])



# update KMS CMK with new policy and alias name 
def updateKMSAlias(account_number):
    """Update an existing KMS CMK based on its description"""

    kms_client = boto3.client('kms',
                      aws_access_key_id=' ', 
                      aws_secret_access_key='  ', 
                      region_name='eu-central-1')

    # client = boto3.client('sts',
    #                   aws_access_key_id=' ', 
    #                   aws_secret_access_key='  ', 
    #                   region_name='eu-central-1')
   
    # get_account = client.get_caller_identity()
    # account_arn =  get_account['Arn']

    response = kms_client.list_keys()
    for cmk in response["Keys"]:
        key_info = kms_client.describe_key(KeyId=cmk["AWSAccountId"])
        if key_info["KeyMetadata"]["AWSAccountId"] == account_number:
            print(key_info["KeyMetadata"]["KeyId"])
            print(key_info["KeyMetadata"]["Arn"])
            # kms_client.create_alias(
            #     AliasName='alias/k8s-user',
            #     TargetKeyId=key_info["KeyMetadata"]["KeyId"]
            # )
            kms_client.update_key_description(
                Description='k8s-user',
                KeyId=key_info["KeyMetadata"]["AWSAccountId"]
            )
            kms_client.put_key_policy(
                KeyId=key_info["KeyMetadata"]["KeyId"],
                Policy=json.dumps(
                    {
                        "Version": "2012-10-17",
                        "Id": "k8s-user",
                        "Statement": [
                            {
                                "Sid": "k8s-user",
                                "Effect": "Allow",
                                "Principal": {
                                    "AWS": [
                                        "{account_number}"
                                    ]
                                },
                                "Action": "kms:*",
                                "Resource": "*"
                            }
                        ]
                    }
                ),
                PolicyName='k8s-user'
            )