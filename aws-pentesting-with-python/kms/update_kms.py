from asyncio.log import logger
import boto3
import json
import sys
import os
import pprint
import boto3
import logging
from moto import mock_kms
from correct.json_datetime_serializer import json_datetime_serializer

# declare env var for aws-shell


logger = logging.getLogger()
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s: %(levelname)s: %(message)s')

# update kms key policy with target arn and key id Allow use of the key with the role specified in the policy name (default is 'default') 
@mock_kms
def update_kms_key_policy(key_id, policy_name, target_arn):
    logger.info(f'keyid and targetarn------{key_id}---{target_arn}')
    client = boto3.client('kms', region_name='us-east-1')
    kms_key_policy_data = client.get_key_policy(KeyId=key_id, PolicyName=policy_name)
    logger.info(f'kms_key_policy_data------{kms_key_policy_data}')
    kms_key_policy = json.loads(kms_key_policy_data['Policy'])
    policy_update = False
    allow_use_of_key_statement = {}
    allow_use_of_key_statement['Sid'] = 'Allow use of the key'
    allow_use_of_key_statement['Effect'] = 'Allow'
    allow_use_of_key_statement['Principal'] = {'AWS': target_arn}
    allow_use_of_key_statement['Action'] = ['kms:Encrypt', 'kms:Decrypt', 'kms:ReEncrypt*', 'kms:GenerateDataKey*', 'kms:CreateGrant']
    allow_use_of_key_statement['Resource'] = [f'arn:aws:kms:{os.environ["AWS_REGION"]}:{os.environ["AWS_ACCOUNT_ID"]}:key/{key_id}']    
    principial_aws = []
    for statement in kms_key_policy['Statement']:
        if "Allow use of the key" in statement["Sid"]:
            if target_arn not in statement["Principal"]["AWS"]:
                if type(statement["Principal"]["AWS"]) is list:
                    principial_aws.append(statement["Principal"]["AWS"])
                    policy_update = True
                elif type(statement["Principal"]["AWS"]) is str:
                    statement["Principal"]["AWS"] = [statement["Principal"]["AWS"]]
                    principial_aws.append(statement["Principal"]["AWS"])
                    policy_update = True
        else:
            statement.append(allow_use_of_key_statement)
            # add new statement to policy if not exist in policy 
            policy_update = True
    return kms_key_policy_data



if __name__ == '__main__':
    logger.info('KMS Creating function......!')
    KEY_ID=input('Enter KEY ID: ')   
    ROLE_ARN=input('Enter the role arn: ')
    logger.info('Done!')
    kms = update_kms_key_policy(ROLE_ARN, KEY_ID)
    logger.info(f'Symetric CMK is created with policy: {json.dumps(kms, indent=4, default=json_datetime_serializer)}')    
        
