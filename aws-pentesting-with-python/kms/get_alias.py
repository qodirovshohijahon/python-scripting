#!/usr/bin/env python3

# get acoount authorization detailsusing boto3 and aws-shell (aws-cli)

import boto3
import json
import sys
import os
import pprint
import boto3

# declare env var for aws-shell

session = boto3.Session(profile_name='k8s-user')
client = boto3.client('kms',
                      aws_access_key_id=' ', 
                      aws_secret_access_key='', 
                      region_name='eu-central-1')

response = client.list_aliases(
    KeyId='arn:aws:kms:eu-central-1:632660066814:key/325b3955-1e89-491d-a50c-ae7a4cd26bc2'
)


def checkAlias(alias_name):
    client = boto3.client('kms',
                      aws_access_key_id=' ', 
                      aws_secret_access_key='', 
                      region_name='eu-central-1')

    response = client.list_aliases()
    for alias in response["Aliases"]:
        print(alias["AliasName"])
        print(alias['AliasName'] == alias_name)
        if alias["AliasName"] == alias_name:
            print("Alias already exists")
            return alias["AliasName"]
        else:
            print("Alias does not exist") # create new KMS
            print(f"Creating alias {alias_name}")
            return False
        # return alias["AliasName"]
        # print(alias["AliasName"])
        # print(alias["AliasArn"])
        # print(alias["TargetKeyId"])
        # print("\n")
    return None

def isKMSExists(key_name):
    kms_count=[]
    ec2 = boto3.client('ec2')

    # Retrieves all regions/endpoints that work with EC2
    response = ec2.describe_regions()
    data = response['Regions']
    count = 0
    kms_count = []
    for i in data:
        count += 1
        for region in i['RegionName']:
            client = boto3.client('kms',
                            aws_access_key_id=' ', 
                            aws_secret_access_key='  ', 
                            region_name=region)
            resp = client.list_aliases()['Aliases']
            for keys in resp:
                if 'alias/aws/' not in keys['AliasName']:
                    kms_count.append(keys)
        print("kms count: " + str(len(kms_count)))


    client = boto3.client('kms',
                      aws_access_key_id=' ', 
                      aws_secret_access_key='  ', 
                      region_name='eu-central-1')

    alias_list = client.list_aliases(Limit=999)
    for keys in alias_list:
        if 'alias/aws/' not in keys['AliasName']:
            kms_count.append(keys)
    print("kms count: " + str(len(kms_count)))
    if alias_list['Truncated'] is True:
        alias_list_trun = alias_list['Aliases']
        for alias in alias_list_trun:
            if alias["AliasName"] == "alias/" + key_name:
                return alias + 'already exists'
        while alias_list['Truncated'] :
            alias_list = client.list_aliases(Limit=999,Marker=alias_list['NextMarker'])
            alias_list_trun = alias_list['Aliases']
            for alias in alias_list_trun:
                if alias["AliasName"] == "alias/" + key_name:
                    return alias["TargetKeyId"]
    else:
        alias_list= alias_list['Aliases']
        for alias in alias_list:
            if alias["AliasName"] == "alias/" + key_name:
                return alias['AliasName'] + ' This KMS is already created, now updating it'
            
print(isKMSExists('aws/ebs'))                


# create function to get all aliases 
def get_aliases():
    client = boto3.client('kms',
                      aws_access_key_id=' ', 
                      aws_secret_access_key='  ', 
                      region_name='eu-central-1')

    response = client.list_aliases(
        KeyId='arn:aws:kms:eu-central-1:632660066814:key/325b3955-1e89-491d-a50c-ae7a4cd26bc2'
    )
    for cmk in response["KeyMetadata"]:
        key_info = client.describe_key(KeyId=cmk["KeyArn"])
        # if key_info["KeyMetadata"]["Description"] == description:
        #     return cmk["KeyId"], cmk["KeyArn"]
        return key_info["KeyMetadata"]["Aliases"], key_info["KeyMetadata"]["Arn"]

    return response

# print(checkAlias('alias/aws/ebs'))