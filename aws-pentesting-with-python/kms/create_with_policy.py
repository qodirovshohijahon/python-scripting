import boto3
import json
import logging
from datetime import date, datetime
from correct.kms_client import kmsClient
from correct.json_datetime_serializer import json_datetime_serializer
from botocore.exceptions import ClientError
from moto import mock_kms
import os
from update_kms import update_kms_key_policy

logger = logging.getLogger()
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s: %(levelname)s: %(message)s')

# @mock_kms
def createKmsWithPolicy(kmsName, policyName, target_arn):
    client = boto3.client('kms')
    response = client.create_key(
        Description='KMS key for ' + kmsName, 
        KeyUsage='ENCRYPT_DECRYPT',
        Origin='AWS_KMS'
    )
    logger.info(f"kms_key_data------{response['KeyMetadata']}")
    key_id = response['KeyMetadata']['KeyId']
    kms_key_policy_data = client.get_key_policy(KeyId=response['KeyMetadata']['KeyId'], PolicyName=policyName)
    logger.info(f'kms_key_policy_data------{kms_key_policy_data}')
    kms_key_policy = json.loads(kms_key_policy_data['Policy'])
    policy_update = False
    allow_use_of_key_statement = {}
    allow_use_of_key_statement = {
        'Sid': 'Allow use of the key',
        'Effect': 'Allow',
        'Principal': {'AWS': target_arn},
        'Action' : ['kms:Encrypt', 'kms:Decrypt', 'kms:ReEncrypt*', 'kms:GenerateDataKey*', 'kms:CreateGrant'],
        'Resource': [f'arn:aws:kms:us-east-1:862638055046:key/{key_id}']
    }
    principial_aws = {"Sid": "Enable IAM User Permissions", "Effect": "Allow", "Principal": {"AWS": "arn:aws:iam::123456789012:root"}, "Action": "kms:*", "Resource": "*"}
    logger.info(f'type of kms_key_policy["Statement"] is {type(kms_key_policy["Statement"])}')
    kms_key_policy['Statement'].append(allow_use_of_key_statement)
    updatedKeyPolicy = client.put_key_policy(KeyId=key_id, PolicyName='default', Policy=json.dumps(kms_key_policy))
    logger.info(
        f'Symetric CMK is created with policy---: {json.dumps(response, indent=4, default=json_datetime_serializer)}'
    )
    logger.info(f"kms_key_data------{response['KeyMetadata']}")

    return updatedKeyPolicy
    
    
# def getKeyPolicy(keyId):
#     client = boto3.client('kms')
#     response = client.get_key_policy(
#         KeyId=keyId,
#         PolicyName='default'
#     )    
#     return response['Policy']


kms = createKmsWithPolicy('demoo', 'default', 'arn:aws:iam::862638055046:role/AWS-QuickSetup-StackSet-Local-ExecutionRole')
logger.info(
    f'Symetric CMK is created with policy: {json.dumps(kms, indent=4, default=json_datetime_serializer)}'
)
logger.info('Done!')